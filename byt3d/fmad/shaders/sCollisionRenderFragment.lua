------------------------------------------------------------------------------------------------------------  
-- 
-- Autogenerated lua Fragment Shaders 
-- 
sCollisionRenderFragment_frag = [[  
// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -quiet -profile glslf -po version=330
// source file: sCollisionRenderFragment.fcg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program main
//semantic main.origin
//semantic main.view
//semantic main.left
//semantic main.up
//semantic main.samplerMap
//semantic main.samplerNormal
//semantic main.samplerGradient
//var float3 origin :  : _origin1 : 1 : 1
//var float3 view :  : _view1 : 2 : 1
//var float3 left :  : _left1 : 3 : 1
//var float3 up :  : _up1 : 4 : 1
//var sampler2D samplerMap :  : _samplerMap2 : 5 : 1
//var sampler2D samplerNormal :  : _samplerNormal1 : 6 : 1
//var float2 tex : $vin.TEXCOORD0 : TEXCOORD0 : 0 : 1
//var float4 oColor0 : $vout.COLOR0 : COLOR0 : 8 : 1
//var float4 oColor1 : $vout.COLOR1 : COLOR1 : 9 : 1
//var float4 oColor2 : $vout.COLOR2 : COLOR2 : 10 : 1
//var float4 oColor3 : $vout.COLOR3 : COLOR3 : 11 : 1

#version 330

#extension GL_ARB_draw_buffers : enable

vec4 _oColor01;
vec4 _oColor21;
vec4 _oColor11;
vec4 _oColor31;
float _TMP12;
float _TMP11;
float _TMP14;
float _TMP13;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
int _TMP3;
int _TMP2;
uint _TMP1;
float _TMP15;
uniform vec3 _origin1;
uniform vec3 _view1;
uniform vec3 _left1;
uniform vec3 _up1;
uniform sampler2DShadow _samplerMap2;
uniform sampler2D _samplerNormal1;
vec3 _v0024;
uint _index0030;
vec3 _Tex0030;
uint _offset0030;
uvec4 _bin0030;
uint _b0030;
vec3 _coord0032;
vec2 _c0036;
vec2 _c0038;
vec2 _c0040;
vec2 _c0042;
vec3 _v0048;
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;
out vec4 cg_FragData2;
out vec4 cg_FragData1;
out vec4 cg_FragData3;

 // main procedure, the original name was main
void main()
{

    vec3 _Dir;
    vec3 _P;
    float _Depth;
    int _i1;
    vec3 _Tex1;
    bool _Hit1;
    vec3 _Base1;
    int _layer01;
    int _layerm1;
    int _layerp1;
    int _layer0X1;
    int _layer0Y1;
    int _layermX1;
    int _layermY1;
    int _layerpX1;
    int _layerpY1;
    vec2 _NTex01;
    vec2 _NTexm1;
    vec2 _NTexp1;
    float _dx1;
    float _dy1;
    float _dz1;
    vec3 _N1;

    _v0024 = _view1 + cg_TexCoord0.x*_left1 + cg_TexCoord0.y*_up1;
    _TMP13 = dot(_v0024, _v0024);
    _TMP14 = inversesqrt(_TMP13);
    _Dir = _TMP14*_v0024;
    _P = _origin1;
    _Depth = 0.00000000E+000;
    _i1 = 0;
    for (; _i1 < 362; _i1 = _i1 + 1) { // for begin
        _Tex1 = vec3(1.28000000E+002 + _P.x, 1.28000000E+002 + _P.y, 1.28000000E+002 + _P.z);
        if (_Tex1.x >= 0.00000000E+000 && _Tex1.x <= 2.56000000E+002 && _Tex1.z >= 0.00000000E+000 && _Tex1.z <= 2.56000000E+002) { // if begin
            _index0030 = uint((int(_Tex1.z) >> 5));
            _offset0030 = uint((int(_Tex1.z) & 31));
            _Tex0030.x = _Tex1.x*3.90625000E-003;
            _Tex0030.y = _Tex1.y*3.90625000E-003;
            _Tex0030.x = (float(_index0030) + _Tex0030.x)*1.25000000E-001;
            _coord0032.xy = _Tex0030.xy;
            _coord0032.z = _Tex1.z;
            _TMP15 = texture(_samplerMap2, _coord0032);
            _bin0030 = uvec4(uint((vec4(_TMP15, _TMP15, _TMP15, _TMP15)*2.55000000E+002).x), uint((vec4(_TMP15, _TMP15, _TMP15, _TMP15)*2.55000000E+002).y), uint((vec4(_TMP15, _TMP15, _TMP15, _TMP15)*2.55000000E+002).z), uint((vec4(_TMP15, _TMP15, _TMP15, _TMP15)*2.55000000E+002).w));
            _b0030 = _bin0030.x | (_bin0030.y << 8u) | (_bin0030.z << 16u) | (_bin0030.w << 24u);
            _TMP1 = (_b0030 >> _offset0030) & 1u;
            _Hit1 = bool(_TMP1);
            if (_Hit1) { // if begin
                _Depth = 1.00000000E+000 - float(_i1)*3.90625000E-003;
                { // break begin
                    break;
                } // end break
            } // end if
        } // end if
        _P = _P + _Dir;
        if (_P.x > 1.28000000E+002 && _Dir.x > 0.00000000E+000) { // if begin
            { // break begin
                break;
            } // end break
        } // end if
        if (_P.x < -1.28000000E+002 && _Dir.x < 0.00000000E+000) { // if begin
            { // break begin
                break;
            } // end break
        } // end if
        if (_P.y > 1.28000000E+002 && _Dir.y > 0.00000000E+000) { // if begin
            { // break begin
                break;
            } // end break
        } // end if
        if (_P.y < -1.28000000E+002 && _Dir.y < 0.00000000E+000) { // if begin
            { // break begin
                break;
            } // end break
        } // end if
        if (_P.z > 1.28000000E+002 && _Dir.z > 0.00000000E+000) { // if begin
            { // break begin
                break;
            } // end break
        } // end if
        if (_P.z < -1.28000000E+002 && _Dir.z < 0.00000000E+000) { // if begin
            { // break begin
                break;
            } // end break
        } // end if
    } // end for
    _oColor01 = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    _oColor11 = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    _oColor21 = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    if (_Depth != 0.00000000E+000) { // if begin
        _Base1 = vec3(1.28000000E+002 + _P.x, 1.28000000E+002 + _P.y, 1.28000000E+002 + _P.z);
        _Base1 = _Base1*vec3( 3.90625000E-003, 3.90625000E-003, 5.00000000E-001);
        _layer01 = int(_Base1.z);
        _layerm1 = int((_Base1.z - 1.00000000E+000));
        _layerp1 = int((_Base1.z + 1.00000000E+000));
        if (_layerm1 < 0) { // if begin
            _TMP2 = 0;
        } else {
            _TMP2 = _layerm1;
        } // end if
        if (_layerp1 > 127) { // if begin
            _TMP3 = 127;
        } else {
            _TMP3 = _layerp1;
        } // end if
        _layer0X1 = _layer01 & 63;
        _layer0Y1 = _layer01 >> 6;
        _layermX1 = _TMP2 & 63;
        _layermY1 = _TMP2 >> 6;
        _layerpX1 = _TMP3 & 63;
        _layerpY1 = _TMP3 >> 6;
        _NTex01 = (vec2(float(_layer0X1), float(_layer0Y1)) + vec2(_Base1.x, _Base1.y))*vec2( 1.56250000E-002, 5.00000000E-001);
        _NTexm1 = (vec2(float(_layermX1), float(_layermY1)) + vec2(_Base1.x, _Base1.y))*vec2( 1.56250000E-002, 5.00000000E-001);
        _NTexp1 = (vec2(float(_layerpX1), float(_layerpY1)) + vec2(_Base1.x, _Base1.y))*vec2( 1.56250000E-002, 5.00000000E-001);
        _TMP4 = texture(_samplerNormal1, _NTex01);
        _c0036 = _NTex01 + vec2( -1.22070313E-004, 0.00000000E+000);
        _TMP5 = texture(_samplerNormal1, _c0036);
        _c0038 = _NTex01 + vec2( 1.22070313E-004, 0.00000000E+000);
        _TMP6 = texture(_samplerNormal1, _c0038);
        _c0040 = _NTex01 + vec2( 0.00000000E+000, -3.90625000E-003);
        _TMP7 = texture(_samplerNormal1, _c0040);
        _c0042 = _NTex01 + vec2( 0.00000000E+000, 3.90625000E-003);
        _TMP8 = texture(_samplerNormal1, _c0042);
        _TMP9 = texture(_samplerNormal1, _NTexm1);
        _TMP10 = texture(_samplerNormal1, _NTexp1);
        _dx1 = (_TMP6.x - _TMP4.x) + (_TMP4.x - _TMP5.x);
        _dy1 = (_TMP8.x - _TMP4.x) + (_TMP4.x - _TMP7.x);
        _dz1 = (_TMP10.x - _TMP4.x) + (_TMP4.x - _TMP9.x);
        _v0048 = vec3(_dx1, _dy1, _dz1);
        _TMP13 = dot(_v0048, _v0048);
        _TMP14 = inversesqrt(_TMP13);
        _N1 = _TMP14*_v0048;
        _TMP11 = dot(_Dir, _N1);
        _TMP12 = max(0.00000000E+000, _TMP11);
        _oColor01 = vec4(2.00000003E-001 + _TMP12, 2.00000003E-001 + _TMP12, 2.00000003E-001 + _TMP12, 2.00000003E-001 + _TMP12);
    } // end if
    cg_FragData3 = _oColor31;
    cg_FragData1 = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    cg_FragData2 = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    cg_FragColor = _oColor01;
} // main end
]] 
-- 
------------------------------------------------------------------------------------------------------------  
