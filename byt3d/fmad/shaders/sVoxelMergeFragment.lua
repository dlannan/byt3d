------------------------------------------------------------------------------------------------------------  
-- 
-- Autogenerated lua Fragment Shaders 
-- 
sVoxelMergeFragment_frag = [[  
// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -quiet -profile glslf -po version=330
// source file: sVoxelMergeFragment.fcg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program main
//semantic main.view
//semantic main.samplerVoxel
//semantic main.samplerViewTable
//var sampler2DARRAY samplerVoxel :  : _samplerVoxel1 : 4 : 1
//var sampler2D samplerViewTable :  : _samplerViewTable1 : 5 : 1
//var float4 iColor : $vin.COLOR :  : 0 : 0
//var float3 _Tex : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 oColor : $vout.COLOR : COLOR : 2 : 1

#version 330

vec4 _oColor1;
float _TMP5;
float _TMP4;
uniform sampler2DArray _samplerVoxel1;
uniform sampler2D _samplerViewTable1;
vec2 _c0012;
vec2 _c0014;
vec2 _c0016;
vec4 _r0020;
vec4 _v0020;
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;

 // main procedure, the original name was main
void main()
{

    vec3 _Tex1;
    vec4 _value;
    int _v1;
    vec4 _View01;
    vec4 _View11;
    vec4 _View21;
    vec3 _Pos1;
    vec3 _aPos1;
    bool _Mask1;
    float _Ox1;
    float _Oy1;
    vec3 _ViewPos1;
    vec4 _color1;

    _Tex1 = cg_TexCoord0.xyz*2.00000000E+000 - 1.00000000E+000;
    _value = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    _v1 = 0;
    for (; _v1 < 64; _v1 = _v1 + 1) { // for begin
        _c0012 = vec2(0.00000000E+000, float((float(_v1)*1.56250000E-002)));
        _View01 = texture(_samplerViewTable1, _c0012);
        _c0014 = vec2(2.50000000E-001, float((float(_v1)*1.56250000E-002)));
        _View11 = texture(_samplerViewTable1, _c0014);
        _c0016 = vec2(5.00000000E-001, float((float(_v1)*1.56250000E-002)));
        _View21 = texture(_samplerViewTable1, _c0016);
        _v0020 = vec4(_Tex1.x, _Tex1.y, _Tex1.z, 1.00000000E+000);
        _r0020.x = dot(_View01, _v0020);
        _r0020.y = dot(_View11, _v0020);
        _r0020.z = dot(_View21, _v0020);
        _aPos1 = abs(_r0020.xyz);
        _Mask1 = bool(int((_aPos1.x >= 9.99000013E-001)));
        _Mask1 = bool((int(_Mask1) | int((_aPos1.y >= 9.99000013E-001))));
        _Mask1 = bool((int(_Mask1) | int((_aPos1.z >= 1.00000000E+000))));
        if (_Mask1) { // if begin
            { // continue begin
                continue;
            } // end continue
        } // end if
        _Pos1 = (_r0020.xyz + 1.00000000E+000)*5.00000000E-001;
        _Ox1 = float((float((_v1%8))*1.25000000E-001));
        _Oy1 = float((float((_v1/8))*1.25000000E-001));
        _ViewPos1 = vec3(_Ox1, _Oy1, 0.00000000E+000) + _Pos1*vec3( 1.25000000E-001, 1.25000000E-001, 6.40000000E+001);
        _color1 = texture(_samplerVoxel1, _ViewPos1);
        _value = _value + _color1;
    } // end for
    if (_value.w == 0.00000000E+000) { // if begin
        discard;
    } // end if
    _TMP4 = dot(_value, _value);
    _TMP5 = inversesqrt(_TMP4);
    _oColor1 = _TMP5*_value;
    cg_FragColor = _oColor1;
} // main end
]] 
-- 
------------------------------------------------------------------------------------------------------------  
