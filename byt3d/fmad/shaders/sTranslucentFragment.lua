------------------------------------------------------------------------------------------------------------  
-- 
-- Autogenerated lua Fragment Shaders 
-- 
sTranslucentFragment_frag = [[  
// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -quiet -profile glslf -po version=330
// source file: sTranslucentFragment.fcg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program main
//semantic main.LightCount
//semantic main.samplerGBuffer0
//semantic main.samplerGBuffer1
//semantic main.samplerGBuffer2
//semantic main.samplerGBuffer3
//semantic main.samplerLightInfo
//var int LightCount :  : _LightCount1 : 7 : 1
//var sampler2D samplerLightInfo :  : _samplerLightInfo1 : 12 : 1
//var float4 Color : $vin.COLOR : COLOR : 0 : 1
//var float4 Pos : $vin.WPOS :  : 1 : 0
//var float3 N : $vin.TEXCOORD0 : TEXCOORD0 : 2 : 1
//var float4 M : $vin.TEXCOORD1 : TEXCOORD1 : 3 : 1
//var float3 V : $vin.TEXCOORD2 : TEXCOORD2 : 4 : 1
//var float4 oDiffuse : $vout.COLOR0 : COLOR0 : 5 : 1
//var float4 oSpecular : $vout.COLOR1 : COLOR1 : 6 : 1

precision mediump float;

#extension GL_ARB_draw_buffers : enable

vec4 _oDiffuse1;
vec4 _oSpecular1;
float _TMP8;
float _TMP7;
float _TMP5;
float _TMP6;
float _TMP4;
float _TMP3;
float _TMP2;
float _TMP10;
float _TMP9;
float _TMP1;
float _TMP11;
uniform int _LightCount1;
uniform sampler2D _samplerLightInfo1;
vec2 _c0027;
vec2 _c0029;
vec2 _c0031;
vec2 _c0035;
float _b0043;
vec3 _v0059;
float _x0079;
float _TMP80;
float _x0081;
float _b0087;
varying vec4 cg_FrontColor;
varying vec4 cg_TexCoord1;
varying vec4 cg_TexCoord0;
varying vec4 cg_TexCoord2;

 // main procedure, the original name was main
void main()
{

    vec3 _Normal;
    vec3 _Diffuse;
    vec3 _Specular;
    int _l1;
    vec4 _LInfo01;
    vec4 _LInfo11;
    vec4 _LInfo21;
    vec4 _LInfo41;
    vec3 _lightDir1;
    vec3 _ViewDir1;
    vec3 _LightToPos1;
    float _Distance21;
    float _Distance1;
    float _FalloffScale1;
    vec3 _viewDir1;
    vec3 _vHalf1;
    float _NormalDotHalf1;
    float _ViewDotHalf1;
    float _NormalDotView1;
    float _NormalDotLight1;
    float _G11;
    float _G21;
    float _G1;
    float _F1;
    float _R_21;
    float _NDotH_21;
    float _A1;
    float _R1;
    float _Denom1;
    float _SpecScale1;

    _TMP9 = dot(cg_TexCoord0.xyz, cg_TexCoord0.xyz);
    _TMP10 = inversesqrt(_TMP9);
    _Normal = _TMP10*cg_TexCoord0.xyz;
    _Diffuse = vec3( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    _Specular = vec3( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    _l1 = 0;
    for (; _l1 < _LightCount1; _l1 = _l1 + 1) { // for begin
        _c0027 = vec2(float((_l1*5))*2.44140625E-004, 0.00000000E+000);
        _LInfo01 = texture2D(_samplerLightInfo1, _c0027);
        _c0029 = vec2(float((_l1*5 + 1))*2.44140625E-004, 0.00000000E+000);
        _LInfo11 = texture2D(_samplerLightInfo1, _c0029);
        _c0031 = vec2(float((_l1*5 + 2))*2.44140625E-004, 0.00000000E+000);
        _LInfo21 = texture2D(_samplerLightInfo1, _c0031);
        _c0035 = vec2(float((_l1*5 + 4))*2.44140625E-004, 0.00000000E+000);
        _LInfo41 = texture2D(_samplerLightInfo1, _c0035);
        _lightDir1 = _LInfo21.xyz - cg_TexCoord2.xyz;
        _ViewDir1 = -cg_TexCoord2.xyz;
        _LightToPos1 = _LInfo21.xyz - cg_TexCoord2.xyz;
        _Distance21 = dot(_LightToPos1, _LightToPos1);
        _TMP11 = inversesqrt(_Distance21);
        _Distance1 = 1.00000000E+000/_TMP11;
        _b0043 = _LInfo41.x + _LInfo41.y*_Distance1 + _LInfo41.z*_Distance21;
        _TMP1 = max(1.00000000E+000, _b0043);
        _FalloffScale1 = _LInfo01.w/_TMP1;
        _FalloffScale1 = min(1.00000000E+000, _FalloffScale1);
        _TMP9 = dot(_ViewDir1, _ViewDir1);
        _TMP10 = inversesqrt(_TMP9);
        _viewDir1 = _TMP10*_ViewDir1;
        _TMP9 = dot(_lightDir1, _lightDir1);
        _TMP10 = inversesqrt(_TMP9);
        _lightDir1 = _TMP10*_lightDir1;
        _v0059 = _lightDir1 + _viewDir1;
        _TMP9 = dot(_v0059, _v0059);
        _TMP10 = inversesqrt(_TMP9);
        _vHalf1 = _TMP10*_v0059;
        _NormalDotHalf1 = dot(_Normal, _vHalf1);
        _ViewDotHalf1 = dot(_vHalf1, _viewDir1);
        _NormalDotView1 = dot(_Normal, _viewDir1);
        _NormalDotLight1 = dot(_Normal, _lightDir1);
        _G11 = (2.00000000E+000*_NormalDotHalf1*_NormalDotView1)/_ViewDotHalf1;
        _G21 = (2.00000000E+000*_NormalDotHalf1*_NormalDotLight1)/_ViewDotHalf1;
        _TMP2 = min(_G11, _G21);
        _TMP3 = max(0.00000000E+000, _TMP2);
        _G1 = min(1.00000000E+000, _TMP3);
        _x0079 = 1.00000000E+000 - _NormalDotView1;
        _TMP4 = pow(_x0079, 5.00000000E+000);
        _F1 = cg_TexCoord1.y*(1.00000000E+000 - _TMP4);
        _R_21 = cg_TexCoord1.x*cg_TexCoord1.x;
        _NDotH_21 = _NormalDotHalf1*_NormalDotHalf1;
        _A1 = 1.00000000E+000/(4.00000000E+000*_R_21*_NDotH_21*_NDotH_21);
        _x0081 = -(1.00000000E+000 - _NDotH_21)/(_R_21*_NDotH_21);
        _TMP80 = pow(2.71828198E+000, _x0081);
        _R1 = _A1*_TMP80;
        _Denom1 = _NormalDotLight1*_NormalDotView1;
        _TMP6 = abs(_Denom1);
        if (_TMP6 <= 9.99999975E-005) { // if begin
            _TMP5 = 0.00000000E+000;
        } else {
            _TMP5 = 1.00000000E+000/_Denom1;
        } // end if
        _b0087 = _G1*_F1*_R1*_TMP5;
        _SpecScale1 = min(1.00000000E+000, _b0087);
        if (_NormalDotLight1 < 9.99999997E-007) { // if begin
            _TMP7 = 0.00000000E+000;
        } else {
            _TMP7 = _SpecScale1;
        } // end if
        if (_NormalDotLight1 < 0.00000000E+000) { // if begin
            _TMP8 = cg_TexCoord1.z;
        } else {
            _TMP8 = max(cg_TexCoord1.z, _NormalDotLight1);
        } // end if
        _Diffuse = _Diffuse + _FalloffScale1*((cg_FrontColor.xyz*_LInfo01.xyz)*_TMP8);
        _Specular = _Specular + _FalloffScale1*(_LInfo11.xyz*vec3(_TMP7, _TMP7, _TMP7));
    } // end for
    _oDiffuse1 = vec4(_Diffuse.x, _Diffuse.y, _Diffuse.z, cg_TexCoord1.w);
    _oSpecular1 = vec4(_Specular.x, _Specular.y, _Specular.z, cg_TexCoord1.w);
    float rem = mod(gl_FragCoord.x, 3.0);
    if(rem < 1.0) {
        gl_FragColor = _oDiffuse1;
    }
    else {
        gl_FragColor = _oSpecular1;
    }
} // main end
]] 
-- 
------------------------------------------------------------------------------------------------------------  
